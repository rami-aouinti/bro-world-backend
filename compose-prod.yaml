services:
    rabbitmq:
        image: ${COMPOSE_PROJECT_NAME}-rabbitmq
        build:
            context: ./docker/rabbitmq/
            dockerfile: ./Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}-rabbitmq
        hostname: rabbitmq
        restart: always
        environment:
            RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
            RABBITMQ_DEFAULT_VHOST: /
        ports:
            - "${RABBITMQ_MANAGEMENT_PORT}:15672"
            - "5672:5672"
        volumes:
            - ./var/rabbitmq:/var/lib/rabbitmq:delegated
        networks:
            - symfony

    elasticsearch:
        image: ${COMPOSE_PROJECT_NAME}-elasticsearch
        build:
            context: ./docker/
            args:
                ELK_VERSION: ${ELK_VERSION}
            dockerfile: ./elasticsearch/Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}-elasticsearch
        restart: always
        environment:
            ES_JAVA_OPTS: "-Xmx4096m -Xms4096m"
            ELASTIC_USERNAME: ${ELASTICSEARCH_USERNAME}
            ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD}
            # Use single node discovery in order to disable production mode and avoid bootstrap checks
            # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
            discovery.type: single-node
        ports:
            - "${ELASTIC_HTTP_PORT}:9200"
            - "9200:9200"
            - "${ELASTIC_TRANSPORT_PORT}:9300"
            - "9300:9300"
        volumes:
            - ./docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
            - ./var/elasticsearch-data:/usr/share/elasticsearch/data:delegated
        networks:
            - symfony

    kibana:
        image: ${COMPOSE_PROJECT_NAME}-kibana
        platform: linux/x86_64
        build:
            context: ./docker/
            args:
                ELK_VERSION: ${ELK_VERSION}
            dockerfile: ./kibana/Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}-kibana
        ports:
            - "5601:5601"
        volumes:
            - ./docker/prod/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
        depends_on:
            - elasticsearch
        networks:
            - symfony

    redis:
        image: ${COMPOSE_PROJECT_NAME}-redis
        container_name: ${COMPOSE_PROJECT_NAME}-redis
        build:
            context: ./docker/redis
        restart: always
        ports:
            - "6379:6379"
        volumes:
            - ./var/redis:/data:delegated
        networks:
            - symfony
    ###> symfony/mercure-bundle ###
    mercure:
        image: dunglas/mercure
        restart: unless-stopped
        ports:
            - "3000:3000"
        environment:
            # Uncomment the following line to disable HTTPS,
            #SERVER_NAME: ':80'
            MERCURE_PUBLISHER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
            MERCURE_SUBSCRIBER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
            # Set the URL of your Symfony project (without trailing slash!) as value of the cors_origins directive
            MERCURE_EXTRA_DIRECTIVES: |
                cors_origins https://bro-world-space.com
        # Comment the following line to disable the development mode
        command: /usr/bin/caddy run --config /etc/caddy/dev.Caddyfile
        healthcheck:
            test: ["CMD", "curl", "-f", "https://bro-world-space.com/healthz"]
            timeout: 5s
            retries: 5
            start_period: 60s
        volumes:
            - mercure_data:/data
            - mercure_config:/config
###< symfony/mercure-bundle ###
networks:
    symfony:
        name: symfony
volumes:
    ###> symfony/mercure-bundle ###
    mercure_data:
    mercure_config:
###< symfony/mercure-bundle ###
